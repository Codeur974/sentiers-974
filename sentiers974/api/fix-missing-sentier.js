const mongoose = require('mongoose');
const Sentier = require('./models/Sentier');
require('dotenv').config();

async function fixMissingSentier() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connexion MongoDB √©tablie');
    
    // Trouver et corriger le sentier manquant
    const sentierPattern = 'La descente √† la Chapelle par la Cascade de Bras Rouge depuis.*la Route de l\'√élet √† Cordes';
    
    console.log('üîç Recherche du sentier √† corriger...');
    const sentier = await Sentier.findOne({
      nom: { $regex: new RegExp(sentierPattern, 'i') }
    });
    
    if (sentier) {
      console.log('‚úÖ Sentier trouv√©:', sentier.nom);
      console.log('   ID:', sentier._id);
      console.log('   R√©gion actuelle:', sentier.region);
      console.log('   Zone sp√©cifique actuelle:', sentier.zone_specifique || 'NON D√âFINIE');
      
      // Mettre √† jour la zone sp√©cifique
      const result = await Sentier.findByIdAndUpdate(sentier._id, {
        zone_specifique: 'Depuis la ville de Cilaos'
      }, { new: true });
      
      console.log('\\nüîß Correction effectu√©e:');
      console.log('   ‚úÖ Zone sp√©cifique mise √† jour:', result.zone_specifique);
      
      // V√©rifier le nombre final
      console.log('\\nüìä V√©rification finale...');
      const count = await Sentier.countDocuments({
        zone_specifique: 'Depuis la ville de Cilaos'
      });
      
      console.log(`‚úÖ Nombre total de sentiers dans "Depuis la ville de Cilaos": ${count}`);
      
    } else {
      console.log('‚ùå Sentier non trouv√© !');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
  }
}

fixMissingSentier();