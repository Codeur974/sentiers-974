const mongoose = require('mongoose');
const Sentier = require('./models/Sentier');
require('dotenv').config();

class SubRegionExtractor {
  
  // Mapping des sous-r√©gions bas√© sur l'analyse de Randopitons.re
  getSubRegionMapping() {
    return {
      'Cirque de Cilaos': {
        'Depuis Bras Sec': ['Bras Sec', 'Mare √† Joncs', 'Maison foresti√®re'],
        'Depuis la route de l\'Ilet √† Cordes': ['Ilet √† Cordes', 'route de l\'Ilet', 'Ilet Fleurs Jaunes'],
        'Depuis la ville de Cilaos': ['Cilaos', 'centre de Cilaos', '√©glise de Cilaos', 'Thermes'],
        'Depuis le Pavillon': ['Pavillon', 'Peter Both'],
        'Depuis Palmiste Rouge': ['Palmiste Rouge'],
        'Depuis le Bloc': ['Bloc', 'Kerv√©guen']
      },
      'Cirque de Mafate': {
        '√Ä partir du Ma√Ødo': ['Ma√Ødo'],
        '√Ä Sans Souci': ['Sans Souci'],
        'Depuis un √Ælet du cirque': ['Nouvelle', 'Aur√®re', 'Grand Place', 'Cayenne', 'Roche Plate'],
        'Par le Col des B≈ìufs, le B√©lier': ['Col des B≈ìufs', 'B√©lier', 'Bord Martin'],
        'De la Rivi√®re des Galets': ['Rivi√®re des Galets', 'Dos d\'Ane'],
        'Depuis Dos D\'Ane': ['Dos d\'Ane']
      },
      'Cirque de Salazie': {
        'Depuis Hell-Bourg': ['Hell-Bourg', 'Grand Ilet'],
        'Depuis Salazie': ['Salazie'],
        'Depuis Mare √† Vieille Place': ['Mare √† Vieille Place'],
        'Depuis Mare √† Martin': ['Mare √† Martin']
      },
      'Est': {
        'Plaine des Palmistes': ['Plaine des Palmistes', 'B√©louve', 'Biberon'],
        'Saint-Andr√©': ['Saint-Andr√©', 'Rivi√®re du M√¢t'],
        'Saint-Beno√Æt': ['Saint-Beno√Æt', 'Takamaka', 'Grand √âtang'],
        'Sainte-Rose': ['Sainte-Rose', 'Bois Blanc'],
        'Sainte-Anne': ['Sainte-Anne']
      },
      'Nord': {
        'Saint-Denis': ['Saint-Denis', 'Roche √âcrite', 'Br√ªl√© de Saint-Denis'],
        'Sainte-Marie': ['Sainte-Marie'],
        'Sainte-Suzanne': ['Sainte-Suzanne', 'Quartier Fran√ßais'],
        'La Possession': ['La Possession']
      },
      'Ouest': {
        'Saint-Paul': ['Saint-Paul', 'Tour des Roches', 'Ma√Ødo'],
        'Le Port': ['Le Port'],
        'La Possession': ['La Possession', 'Rivi√®re des Galets'],
        'Saint-Leu': ['Saint-Leu', '√âtang-Sal√©']
      },
      'Sud': {
        'Saint-Pierre': ['Saint-Pierre', 'Ravine des Cabris'],
        'Saint-Joseph': ['Saint-Joseph', 'Langevin', 'Grand Coude'],
        'Saint-Louis': ['Saint-Louis', 'Makes', 'T√©velave'],
        'Entre-Deux': ['Entre-Deux', 'Dimitile']
      },
      'Volcan': {
        'Plaine des Cafres': ['Plaine des Cafres', 'Bourg-Murat'],
        'Plaine des Sables': ['Plaine des Sables'],
        'Enclos du volcan': ['Pas de Bellecombe', 'Crat√®re', 'Enclos'],
        'Hautes Plaines': ['Hautes Plaines', 'Nez de B≈ìuf']
      }
    };
  }
  
  // D√©terminer la sous-r√©gion bas√©e sur le point de d√©part
  detectSubRegion(region, pointDepart, nomSentier) {
    const mapping = this.getSubRegionMapping();
    const regionMapping = mapping[region];
    
    if (!regionMapping) return null;
    
    const searchText = `${pointDepart} ${nomSentier}`.toLowerCase();
    
    // Chercher la sous-r√©gion qui correspond le mieux
    for (const [subRegion, keywords] of Object.entries(regionMapping)) {
      for (const keyword of keywords) {
        if (searchText.includes(keyword.toLowerCase())) {
          return subRegion;
        }
      }
    }
    
    return null;
  }
  
  async extractSubRegions() {
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      console.log('‚úÖ Connexion MongoDB √©tablie');
      
      const sentiers = await Sentier.find({});
      console.log(`üìä Analyse de ${sentiers.length} sentiers`);
      
      let updated = 0;
      const subRegionStats = {};
      
      for (const sentier of sentiers) {
        const subRegion = this.detectSubRegion(
          sentier.region, 
          sentier.point_depart.nom, 
          sentier.nom
        );
        
        if (subRegion) {
          sentier.zone_specifique = subRegion;
          await sentier.save();
          updated++;
          
          // Stats
          const key = `${sentier.region} > ${subRegion}`;
          subRegionStats[key] = (subRegionStats[key] || 0) + 1;
        }
      }
      
      console.log(`\n‚úÖ ${updated} sentiers mis √† jour avec sous-r√©gions`);
      
      console.log('\nüìà R√©partition par sous-r√©gion:');
      Object.entries(subRegionStats)
        .sort(([,a], [,b]) => b - a)
        .forEach(([region, count]) => {
          console.log(`  ${region}: ${count} sentiers`);
        });
        
    } catch (error) {
      console.error('‚ùå Erreur:', error);
    } finally {
      await mongoose.connection.close();
    }
  }
}

const extractor = new SubRegionExtractor();
extractor.extractSubRegions();