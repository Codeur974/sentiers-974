const mongoose = require('mongoose');
const Sentier = require('./models/Sentier');
require('dotenv').config();

async function fixRegionsMapping() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connexion MongoDB √©tablie');
    
    // Mapping correct des sous-r√©gions vers leurs r√©gions principales selon le fichier .md
    const correctRegionMapping = {
      // Cirque de Cilaos
      'Dans les alentours de Bras Sec': 'Cirque de Cilaos',
      'Depuis la route de l\'Ilet √† Cordes ou de l\'√élet √† Cordes': 'Cirque de Cilaos',
      'Depuis la ville de Cilaos': 'Cirque de Cilaos',
      'Depuis le Pavillon': 'Cirque de Cilaos',
      'Depuis Palmiste Rouge': 'Cirque de Cilaos',
      'Depuis le Bloc': 'Cirque de Cilaos',
      
      // Cirque de Mafate
      'A partir du Ma√Ødo': 'Cirque de Mafate',
      'A Sans Souci': 'Cirque de Mafate',
      'Depuis un √Ælet du cirque': 'Cirque de Mafate',
      'Par le Col des Boeufs, le B√©lier': 'Cirque de Mafate',
      'De la Rivi√®re des Galets': 'Cirque de Mafate',
      'Depuis Dos D\'Ane': 'Cirque de Mafate',
      
      // Cirque de Salazie
      'A partir de Hell-Bourg ou de l\'Ilet √† Vidot': 'Cirque de Salazie',
      'Depuis Grand Ilet ou la mare √† Martin': 'Cirque de Salazie',
      'Depuis Salazie': 'Cirque de Salazie',
      
      // Est
      'Depuis Bras Panon': 'Est',
      'Depuis Saint-Andr√©': 'Est',
      'Du c√¥t√© de Bourg Murat': 'Est',
      'La r√©gion de St Benoit': 'Est',
      'Les alentours de Bois Blanc et Sainte-Rose': 'Est',
      'Les alentours du volcan': 'Est',
      'La r√©gion de la Plaine des Palmistes': 'Est',
      'La r√©gion de B√©bour - B√©louve': 'Est',
      
      // Nord
      'Depuis Dos d\'Ane': 'Nord',
      'Depuis le Br√ªl√©': 'Nord',
      'Depuis Sainte-Suzanne': 'Nord',
      'La Montagne ou Saint-Bernard': 'Nord',
      'La Possession': 'Nord',
      'Les alentours de Saint-Denis': 'Nord',
      'Plusieurs directions vers la Roche Ecrite': 'Nord',
      'R√©gion de Saint-Andr√©': 'Nord',
      
      // Ouest
      'Autour du Ma√Ødo et RF Cryptomerias': 'Ouest',
      'Environs du T√©velave': 'Ouest',
      'Etang Sal√© les Hauts ou Avirons': 'Ouest',
      'La r√©gion de Saint-Leu': 'Ouest',
      'La r√©gion des Makes': 'Ouest',
      'Le long de la RF des Tamarins': 'Ouest',
      'Saint Paul': 'Ouest',
      'Saint-Gilles et Ermitage': 'Ouest',
      'R√©gion de Bois d\'Olive et Saint-Louis': 'Ouest',
      'Vers l\' Etang Sal√©': 'Ouest',
      'La Rivi√®re': 'Ouest',
      
      // Sud
      'A Grand Coude': 'Sud',
      'Autour de Petite Ile ou St Pierre': 'Sud',
      'Entre le Volcan et Bourg Murat': 'Sud',
      'La r√©gion de Langevin': 'Sud',
      'La r√©gion de Saint Joseph': 'Sud',
      'La r√©gion du Tampon': 'Sud',
      'Les alentours de l\'Entre-Deux': 'Sud',
      'R√©gion de Bois Court': 'Sud',
      'Saint-Philippe et le Tremblet': 'Sud',
      'La r√©gion de Grand Galet': 'Sud',
      'R√©gion de la Plaine des Gr√®gues': 'Sud',
      
      // Volcan
      'Volcan Enclos': 'Volcan',
      'Volcan Hors enclos': 'Volcan',
      'Volcan Nord': 'Volcan',
      'Volcan Sud': 'Volcan'
    };
    
    console.log('üîÑ Correction des r√©gions principales...');
    
    let corrected = 0;
    let notFound = 0;
    
    // Parcourir tous les sentiers avec une zone_specifique
    const sentiers = await Sentier.find({ 
      zone_specifique: { $exists: true, $ne: null } 
    });
    
    console.log(`üìä ${sentiers.length} sentiers √† v√©rifier...`);
    
    for (const sentier of sentiers) {
      const correctRegion = correctRegionMapping[sentier.zone_specifique];
      
      if (correctRegion) {
        if (sentier.region !== correctRegion) {
          await Sentier.findByIdAndUpdate(sentier._id, {
            region: correctRegion
          });
          console.log(`‚úÖ Corrig√©: "${sentier.nom.substring(0, 50)}..." ‚Üí ${correctRegion} / ${sentier.zone_specifique}`);
          corrected++;
        }
      } else {
        console.log(`‚ö†Ô∏è  Zone inconnue: "${sentier.zone_specifique}" pour "${sentier.nom.substring(0, 50)}..."`);
        notFound++;
      }
    }
    
    console.log(`\nüéâ Correction termin√©e:`);
    console.log(`   ‚úÖ ${corrected} sentiers corrig√©s`);
    console.log(`   ‚ö†Ô∏è  ${notFound} zones sp√©cifiques non reconnues`);
    
    // Statistiques finales
    console.log('\nüìä R√©partition finale par r√©gion:');
    const stats = await Sentier.aggregate([
      { $match: { zone_specifique: { $exists: true, $ne: null } } },
      {
        $group: {
          _id: { region: '$region', zone_specifique: '$zone_specifique' },
          count: { $sum: 1 }
        }
      },
      { $sort: { '_id.region': 1, '_id.zone_specifique': 1 } }
    ]);
    
    const regionTotals = {};
    let currentRegion = '';
    for (const stat of stats) {
      if (stat._id.region !== currentRegion) {
        console.log(`\nüèîÔ∏è  ${stat._id.region}:`);
        currentRegion = stat._id.region;
        regionTotals[currentRegion] = 0;
      }
      console.log(`   üìç ${stat._id.zone_specifique}: ${stat.count} sentiers`);
      regionTotals[currentRegion] += stat.count;
    }
    
    console.log('\nüåü TOTAUX PAR R√âGION:');
    Object.entries(regionTotals).forEach(([region, total]) => {
      console.log(`   ${region}: ${total} sentiers`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
  }
}

// Ex√©cuter le script
fixRegionsMapping();