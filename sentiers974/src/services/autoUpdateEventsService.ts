import axios from 'axios';
import { SportEvent } from '../types/events';
import { getSportEmoji } from '../utils/sportCategories';
import { REUNION_SPORTS_EVENTS } from '../data/reunionEvents';

/**
 * Service d'automatisation pour la mise √† jour des √©v√©nements sportifs
 * Scrape les sites officiels et met √† jour la base de donn√©es
 */
class AutoUpdateEventsService {
  private readonly SOURCES = {
    SPORT_PRO: 'https://www.sportpro.re/courses/',
    GRAND_RAID: 'https://www.grandraid-reunion.com',
    CYCLISME_REUNION: 'https://gravitybikes.re/blog/calendrier-des-courses-2025-reunion-comite-regional-de-cyclisme/',
  };

  private readonly UPDATE_INTERVAL = 7 * 24 * 60 * 60 * 1000; // 7 jours en millisecondes

  /**
   * Lance la mise √† jour automatique des √©v√©nements
   */
  async startAutoUpdate(): Promise<void> {
    console.log('üîÑ D√©marrage du syst√®me de mise √† jour automatique des √©v√©nements');
    
    // Premi√®re mise √† jour imm√©diate
    await this.updateEvents();
    
    // Programmation des mises √† jour p√©riodiques
    setInterval(async () => {
      await this.updateEvents();
    }, this.UPDATE_INTERVAL);
    
    console.log(`‚úÖ Syst√®me programm√© pour mise √† jour toutes les ${this.UPDATE_INTERVAL / (24 * 60 * 60 * 1000)} jours`);
  }

  /**
   * Met √† jour les √©v√©nements depuis toutes les sources
   */
  private async updateEvents(): Promise<void> {
    console.log('üì° D√©but de la mise √† jour automatique des √©v√©nements...');
    
    try {
      const newEvents: SportEvent[] = [];
      
      // 1. Scraper Sport PRO R√©union
      const sportProEvents = await this.scrapeSportProReunion();
      newEvents.push(...sportProEvents);
      
      // 2. Scraper les √©v√©nements cyclisme
      const cyclismeEvents = await this.scrapeCyclismeReunion();
      newEvents.push(...cyclismeEvents);
      
      // 3. V√©rifier les nouvelles dates Grand Raid
      const grandRaidEvents = await this.checkGrandRaidUpdates();
      newEvents.push(...grandRaidEvents);
      
      // 4. Filtrer les nouveaux √©v√©nements uniquement
      const filteredNewEvents = this.filterNewEvents(newEvents);
      
      if (filteredNewEvents.length > 0) {
        console.log(`üÜï ${filteredNewEvents.length} nouveaux √©v√©nements trouv√©s`);
        await this.addNewEventsToDatabase(filteredNewEvents);
        
        // Notification (optionnel)
        this.notifyNewEvents(filteredNewEvents);
      } else {
        console.log('‚úÖ Aucun nouvel √©v√©nement trouv√©');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour automatique:', error);
    }
  }

  /**
   * Scrape les √©v√©nements de Sport PRO R√©union
   */
  private async scrapeSportProReunion(): Promise<SportEvent[]> {
    const events: SportEvent[] = [];
    
    try {
      const response = await axios.get(this.SOURCES.SPORT_PRO, {
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      // Parsing HTML basique pour extraire les √©v√©nements
      const html = response.data;
      
      // Recherche de patterns d'√©v√©nements dans le HTML
      const eventPatterns = [
        /(\d{1,2}\/\d{1,2}\/2025).*?(trail|course|marathon|10km|semi)/gi,
        /(\d{4}-\d{2}-\d{2}).*?(trail|course|marathon)/gi
      ];
      
      eventPatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(html)) !== null) {
          const dateStr = match[1];
          const sportType = match[2];
          
          // Conversion de date si n√©cessaire
          const eventDate = this.parseDate(dateStr);
          
          if (eventDate && this.isFutureDate(eventDate)) {
            events.push({
              id: `scraped_${Date.now()}_${Math.random()}`,
              title: `Nouvel √©v√©nement ${sportType}`,
              sport: this.detectSportType(sportType),
              emoji: getSportEmoji(this.detectSportType(sportType)),
              date: eventDate,
              time: '08:00',
              location: 'La R√©union',
              description: `√âv√©nement ${sportType} d√©couvert automatiquement`,
              difficulty: 'moyen',
              distance: 'Variable',
              elevation: 'Variable',
              organizer: 'Organisateur local',
              registration: '√Ä v√©rifier',
              price: '√Ä confirmer',
            });
          }
        }
      });
      
      console.log(`üìä Sport PRO: ${events.length} √©v√©nements trouv√©s`);
      return events;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur scraping Sport PRO R√©union:', error);
      return [];
    }
  }

  /**
   * Scrape les √©v√©nements cyclisme
   */
  private async scrapeCyclismeReunion(): Promise<SportEvent[]> {
    const events: SportEvent[] = [];
    
    try {
      const response = await axios.get(this.SOURCES.CYCLISME_REUNION, {
        timeout: 10000
      });
      
      // Pattern pour d√©tecter les √©preuves VTT/cyclisme
      const cyclismePattern = /(\d{4}-\d{2}-\d{2}).*?(VTT|cyclisme|v√©lo|XCO|enduro)/gi;
      let match;
      
      while ((match = cyclismePattern.exec(response.data)) !== null) {
        const eventDate = match[1];
        const sportType = match[2];
        
        if (this.isFutureDate(eventDate)) {
          events.push({
            id: `cyclisme_${Date.now()}_${Math.random()}`,
            title: `√âpreuve ${sportType} - Nouveau`,
            sport: sportType.toLowerCase().includes('vtt') ? 'VTT' : 'V√©lo',
            emoji: sportType.toLowerCase().includes('vtt') ? 'üöµ‚Äç‚ôÄÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è',
            date: eventDate,
            time: '09:00',
            location: 'La R√©union',
            description: `Nouvelle √©preuve ${sportType} d√©tect√©e automatiquement`,
            difficulty: 'difficile',
            distance: 'Variable',
            elevation: '+500m',
            organizer: 'Comit√© Cyclisme R√©union',
            registration: 'Obligatoire',
            price: '30‚Ç¨-50‚Ç¨',
          });
        }
      }
      
      console.log(`üö¥ Cyclisme: ${events.length} √©v√©nements trouv√©s`);
      return events;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur scraping Cyclisme R√©union:', error);
      return [];
    }
  }

  /**
   * V√©rifie les mises √† jour du Grand Raid
   */
  private async checkGrandRaidUpdates(): Promise<SportEvent[]> {
    try {
      // V√©rifier s'il y a de nouvelles courses Grand Raid annonc√©es
      const response = await axios.get(this.SOURCES.GRAND_RAID, {
        timeout: 10000
      });
      
      // D√©tecter si de nouvelles courses ont √©t√© ajout√©es
      const newRaces = this.detectNewGrandRaidRaces(response.data);
      
      console.log(`üèÉ‚Äç‚ôÇÔ∏è Grand Raid: ${newRaces.length} nouveaut√©s trouv√©es`);
      return newRaces;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur v√©rification Grand Raid:', error);
      return [];
    }
  }

  /**
   * D√©tecte les nouvelles courses du Grand Raid
   */
  private detectNewGrandRaidRaces(html: string): SportEvent[] {
    const events: SportEvent[] = [];
    
    // Pattern pour d√©tecter de nouvelles courses
    const racePattern = /(nouvelle|2026|prochaine).*?(course|trail|raid)/gi;
    
    if (racePattern.test(html)) {
      // Si de nouveaux √©l√©ments sont d√©tect√©s, cr√©er des √©v√©nements placeholder
      events.push({
        id: `grand_raid_new_${Date.now()}`,
        title: 'Nouvelle course Grand Raid d√©tect√©e',
        sport: 'Trail',
        emoji: 'üèÉ‚Äç‚ôÇÔ∏è',
        date: '2025-12-31', // Date placeholder
        time: '06:00',
        location: 'La R√©union',
        description: 'Nouvelle course du Grand Raid d√©tect√©e - d√©tails √† confirmer',
        difficulty: 'difficile',
        distance: '√Ä confirmer',
        elevation: '√Ä confirmer',
        organizer: 'Association du Grand Raid',
        registration: '√Ä venir',
        price: '√Ä d√©finir',
        website: 'https://www.grandraid-reunion.com',
      });
    }
    
    return events;
  }

  /**
   * Filtre les nouveaux √©v√©nements (non pr√©sents dans la base)
   */
  private filterNewEvents(scrapedEvents: SportEvent[]): SportEvent[] {
    return scrapedEvents.filter(newEvent => {
      return !REUNION_SPORTS_EVENTS.some(existingEvent => 
        existingEvent.title === newEvent.title && 
        existingEvent.date === newEvent.date
      );
    });
  }

  /**
   * Ajoute les nouveaux √©v√©nements √† la base de donn√©es
   */
  private async addNewEventsToDatabase(newEvents: SportEvent[]): Promise<void> {
    try {
      console.log('üíæ Nouveaux √©v√©nements √† ajouter:');
      newEvents.forEach((event, index) => {
        console.log(`${index + 1}. ${event.title} - ${event.date} (${event.sport})`);
      });
      
      // Int√©grer avec le service de base de donn√©es
      const { eventsDatabaseService } = await import('./eventsDatabase');
      const addedCount = await eventsDatabaseService.addNewEvents(newEvents);
      
      console.log(`‚úÖ ${addedCount} nouveaux √©v√©nements ajout√©s √† la base de donn√©es`);
    } catch (error) {
      console.error('‚ùå Erreur ajout nouveaux √©v√©nements:', error);
    }
  }

  /**
   * Notifie les utilisateurs des nouveaux √©v√©nements
   */
  private notifyNewEvents(events: SportEvent[]): void {
    console.log(`üîî Notification: ${events.length} nouveaux √©v√©nements sportifs ajout√©s !`);
    
    // Ici on pourrait :
    // - Envoyer des push notifications
    // - Envoyer des emails
    // - Mettre √† jour un feed
    // - Notifier via webhook Discord/Slack
  }

  /**
   * Utilitaires
   */
  private parseDate(dateStr: string): string {
    // Conversion des formats de date fran√ßais vers ISO
    if (dateStr.includes('/')) {
      const [day, month, year] = dateStr.split('/');
      return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
    }
    return dateStr;
  }

  private isFutureDate(dateStr: string): boolean {
    const eventDate = new Date(dateStr);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return eventDate >= today;
  }

  private detectSportType(text: string): string {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('trail')) return 'Trail';
    if (lowerText.includes('marathon')) return 'Course';
    if (lowerText.includes('course') || lowerText.includes('10km')) return 'Course';
    if (lowerText.includes('vtt')) return 'VTT';
    if (lowerText.includes('v√©lo') || lowerText.includes('cyclisme')) return 'V√©lo';
    if (lowerText.includes('natation')) return 'Natation';
    if (lowerText.includes('surf')) return 'Surf';
    
    return 'Course'; // par d√©faut
  }

  /**
   * Arr√™te le syst√®me de mise √† jour automatique
   */
  stopAutoUpdate(): void {
    console.log('üõë Arr√™t du syst√®me de mise √† jour automatique');
  }
}

export const autoUpdateEventsService = new AutoUpdateEventsService();