import React, { useState } from "react";
import { Text, TouchableOpacity, View, ScrollView } from "react-native";

interface FloatingTrackingControlsProps {
  selectedSport: any;
  trackingLogic: any;
  onBackToSelection: () => void;
}

export default function FloatingTrackingControls({
  selectedSport,
  trackingLogic,
  onBackToSelection,
}: FloatingTrackingControlsProps) {
  const [minimized, setMinimized] = useState(false);
  
  // Debug supprim√© - causait trop de logs
  
  if (!selectedSport) return null;

  const getMainButton = () => {
    if (trackingLogic.locationError && trackingLogic.status === "idle") {
      return (
        <TouchableOpacity
          onPress={trackingLogic.handleStartTracking}
          className="bg-green-600 px-4 py-3 rounded-xl flex-1 mr-2"
        >
          <Text className="text-white font-bold text-center">
            ‚ñ∂Ô∏è D√©marrer
          </Text>
        </TouchableOpacity>
      );
    }

    if (trackingLogic.status === "idle") {
      return (
        <TouchableOpacity
          onPress={trackingLogic.handleStartTracking}
          className="bg-green-600 px-4 py-3 rounded-xl flex-1 mr-2"
        >
          <Text className="text-white font-bold text-center">
            ‚ñ∂Ô∏è D√©marrer
          </Text>
        </TouchableOpacity>
      );
    }

    if (trackingLogic.status === "running") {
      return (
        <TouchableOpacity
          onPress={trackingLogic.handlePauseTracking}
          className="bg-orange-600 px-4 py-3 rounded-xl flex-1 mr-2"
        >
          <Text className="text-white font-bold text-center">‚è∏Ô∏è Pause</Text>
        </TouchableOpacity>
      );
    }

    if (trackingLogic.status === "paused") {
      return (
        <TouchableOpacity
          onPress={trackingLogic.handleResumeTracking}
          className="bg-blue-600 px-4 py-3 rounded-xl flex-1 mr-2"
        >
          <Text className="text-white font-bold text-center">‚ñ∂Ô∏è Reprendre</Text>
        </TouchableOpacity>
      );
    }

    if (trackingLogic.status === "stopped") {
      return (
        <TouchableOpacity
          onPress={trackingLogic.handleNewSession}
          className="bg-green-600 px-4 py-3 rounded-xl flex-1 mr-2"
        >
          <Text className="text-white font-bold text-center">üîÑ Refaire</Text>
        </TouchableOpacity>
      );
    }

    return null;
  };

  const getSecondaryButton = () => {
    if (trackingLogic.status === "running" || trackingLogic.status === "paused") {
      return (
        <TouchableOpacity
          onPress={trackingLogic.handleStopTracking}
          className="bg-red-600 px-4 py-3 rounded-xl flex-1"
        >
          <Text className="text-white font-bold text-center">‚èπÔ∏è Stop</Text>
        </TouchableOpacity>
      );
    }

    if (trackingLogic.status === "stopped") {
      return (
        <TouchableOpacity
          onPress={onBackToSelection}
          className="bg-gray-600 px-4 py-3 rounded-xl flex-1"
        >
          <Text className="text-white font-bold text-center">‚öΩ Changer</Text>
        </TouchableOpacity>
      );
    }

    return null;
  };

  return (
    <View className="absolute bottom-4 left-4 right-4 z-30">
      <View className="bg-white/95 backdrop-blur-sm rounded-xl shadow-lg">
        {/* Header avec contr√¥les */}
        <View className="flex-row items-center justify-between p-4 border-b border-gray-200">
          <View className="flex-row items-center">
            <Text className="text-lg font-bold mr-2">
              {selectedSport.emoji} {selectedSport.nom}
            </Text>
            {trackingLogic.status === "running" && (
              <View className="bg-green-100 px-2 py-1 rounded-full">
                <Text className="text-green-600 text-xs font-medium">EN COURS</Text>
              </View>
            )}
            {trackingLogic.status === "paused" && (
              <View className="bg-orange-100 px-2 py-1 rounded-full">
                <Text className="text-orange-600 text-xs font-medium">PAUSE</Text>
              </View>
            )}
            {trackingLogic.status === "stopped" && (
              <View className="bg-blue-100 px-2 py-1 rounded-full">
                <Text className="text-blue-600 text-xs font-medium">TERMIN√â</Text>
              </View>
            )}
          </View>
          
          <TouchableOpacity
            onPress={() => setMinimized(!minimized)}
            className="bg-gray-200 px-3 py-2 rounded-lg"
          >
            <Text className="text-gray-600 font-bold">
              {minimized ? "‚¨ÜÔ∏è" : "‚¨áÔ∏è"}
            </Text>
          </TouchableOpacity>
        </View>

        {/* Stats compl√®tes ou r√©duites */}
        {!minimized && trackingLogic.status !== "idle" && (
          <ScrollView className="max-h-64">
            <View className="p-4">
              {/* Erreur GPS si pr√©sente */}
              {trackingLogic.locationError && (
                <View className="mb-4 p-3 bg-red-50 rounded-lg border border-red-200">
                  <Text className="text-red-700 font-bold text-center mb-1">‚ö†Ô∏è Erreur GPS</Text>
                  <Text className="text-red-600 text-center text-sm">{trackingLogic.locationError}</Text>
                </View>
              )}

              {/* Stats principales */}
              <View className="mb-4">
                <Text className="text-lg font-bold text-center mb-3">
                  ‚è±Ô∏è {Math.floor(trackingLogic.duration / 60000)}:{String(Math.floor((trackingLogic.duration % 60000) / 1000)).padStart(2, '0')}
                </Text>
                
                <View className="flex-row justify-between mb-3">
                  <View className="items-center flex-1">
                    <Text className="text-2xl font-bold text-blue-600">{trackingLogic.distance.toFixed(2)}</Text>
                    <Text className="text-xs text-gray-500">Distance (km)</Text>
                  </View>
                  <View className="items-center flex-1">
                    <Text className="text-2xl font-bold text-green-600">{trackingLogic.instantSpeed.toFixed(1)}</Text>
                    <Text className="text-xs text-gray-500">Vitesse actuelle (km/h)</Text>
                  </View>
                  <View className="items-center flex-1">
                    <Text className="text-2xl font-bold text-orange-600">{trackingLogic.calories}</Text>
                    <Text className="text-xs text-gray-500">Calories</Text>
                  </View>
                </View>
              </View>

              {/* Stats d√©taill√©es */}
              <View className="space-y-3">
                <View className="flex-row justify-between items-center py-2 border-b border-gray-100">
                  <Text className="text-gray-700">üèÉ‚Äç‚ôÇÔ∏è Nombre de pas</Text>
                  <Text className="font-bold">{trackingLogic.steps.toLocaleString()}</Text>
                </View>
                
                <View className="flex-row justify-between items-center py-2 border-b border-gray-100">
                  <Text className="text-gray-700">‚ö° Vitesse max</Text>
                  <Text className="font-bold">{trackingLogic.maxSpeed.toFixed(1)} km/h</Text>
                </View>
                
                <View className="flex-row justify-between items-center py-2 border-b border-gray-100">
                  <Text className="text-gray-700">üìä Vitesse moyenne totale</Text>
                  <Text className="font-bold">{trackingLogic.avgSpeed.toFixed(1)} km/h</Text>
                </View>
                
                
                {trackingLogic.coords && (
                  <>
                    <View className="flex-row justify-between items-center py-2 border-b border-gray-100">
                      <Text className="text-gray-700">üéØ Pr√©cision GPS</Text>
                      <Text className="font-bold">¬±{trackingLogic.coords.accuracy?.toFixed(0) || '?'}m</Text>
                    </View>
                    
                    {trackingLogic.coords.altitude && (
                      <View className="flex-row justify-between items-center py-2 border-b border-gray-100">
                        <Text className="text-gray-700">‚õ∞Ô∏è Altitude</Text>
                        <Text className="font-bold">{trackingLogic.coords.altitude.toFixed(0)}m</Text>
                      </View>
                    )}
                  </>
                )}
                
                <View className="flex-row justify-between items-center py-2 border-b border-gray-100">
                  <Text className="text-gray-700">üõ£Ô∏è Points GPS</Text>
                  <Text className="font-bold">{trackingLogic.trackingPath?.length || 0}</Text>
                </View>
                
                <View className="flex-row justify-between items-center py-2">
                  <Text className="text-gray-700">üì° GPS actif</Text>
                  <Text className="font-bold">{trackingLogic.watching ? "‚úÖ Oui" : "‚ùå Non"}</Text>
                </View>
                
                
                {trackingLogic.address && (
                  <View className="py-2">
                    <Text className="text-gray-700 mb-1">üìç Position</Text>
                    <Text className="text-sm text-gray-600">{trackingLogic.address}</Text>
                  </View>
                )}
              </View>
            </View>
          </ScrollView>
        )}

        {/* Vue minimis√©e */}
        {minimized && trackingLogic.status !== "idle" && (
          <View className="px-4 py-2">
            <View className="flex-row justify-between items-center">
              <Text className="font-bold">
                ‚è±Ô∏è {Math.floor(trackingLogic.duration / 60000)}:{String(Math.floor((trackingLogic.duration % 60000) / 1000)).padStart(2, '0')}
              </Text>
              <Text className="font-bold">üìè {trackingLogic.distance.toFixed(2)} km</Text>
              <Text className="font-bold">üèÉ {trackingLogic.instantSpeed.toFixed(1)} km/h</Text>
              <Text className="font-bold">üî• {trackingLogic.calories} kcal</Text>
            </View>
          </View>
        )}

        {/* Message de d√©marrage */}
        {trackingLogic.status === "idle" && (
          <View className="px-4 py-3">
            <Text className="text-center text-gray-600">
              Appuyez sur ‚ñ∂Ô∏è pour commencer votre session {selectedSport.nom}
            </Text>
          </View>
        )}
      </View>
    </View>
  );
}